

// Singleton para usar en toda la app
class JobsRealtimeManager {
  static final JobsRealtimeManager _instance = JobsRealtimeManager._internal();
  factory JobsRealtimeManager() => _instance;
  JobsRealtimeManager._internal();

  final JobsListener _listener = JobsListener();

  Future<void> initialize() async {
    await _listener.startListening(
      onJobCreated: (job) {
        print('游댒 Notificaci칩n: Nuevo trabajo - ${job['title']}');
        // Aqu칤 podr칤as enviar notificaci칩n push
      },
      onJobUpdated: (newJob, oldJob) {
        if (oldJob != null && newJob['application_deadline'] != oldJob['application_deadline']) {
          print('游댒 Notificaci칩n: Deadline actualizado - ${newJob['title']}');
          // Aqu칤 podr칤as enviar notificaci칩n push
        }
      },
      onJobDeleted: (job) {
        print('游댒 Notificaci칩n: Trabajo eliminado - ${job['title']}');
      },
    );
  }

  void dispose() {
    _listener.stopListening();
  }
}

USO SIMPLE: class MiWidget extends StatefulWidget {
  @override
  State<MiWidget> createState() => _MiWidgetState();
}

class _MiWidgetState extends State<MiWidget> {
  final JobsListener _listener = JobsListener();

  @override
  void initState() {
    super.initState();
    
    // Listener simple
    _listener.startListening(
      onJobUpdated: (newJob, oldJob) {
        print('Job actualizado: ${newJob['title']}');
        // Tu l칩gica aqu칤
      },
    );
  }

  @override
  void dispose() {
    _listener.stopListening();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Container(); // Tu UI
  }
}

Resumen
Esta implementaci칩n te da:

Un solo listener general para todos los cambios en jobs
F치cil de usar - Solo llamas startListening() y stopListening()
Callbacks opcionales - Puedes manejar solo los eventos que necesites
Logs autom치ticos - Para debugging
Detecci칩n de cambios espec칤ficos - application_deadline, status, etc.
Notificaciones visuales - SnackBars autom치ticos
Indicador de estado - Para saber si est치 conectado

Uso b치sico:
